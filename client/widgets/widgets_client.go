// Code generated by go-swagger; DO NOT EDIT.

package widgets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new widgets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for widgets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateWidget(params *CreateWidgetParams, opts ...ClientOption) (*CreateWidgetCreated, error)

	DeleteWidget(params *DeleteWidgetParams, opts ...ClientOption) (*DeleteWidgetNoContent, error)

	GetWidget(params *GetWidgetParams, opts ...ClientOption) (*GetWidgetOK, error)

	ListWidgets(params *ListWidgetsParams, opts ...ClientOption) (*ListWidgetsOK, error)

	UpdateWidget(params *UpdateWidgetParams, opts ...ClientOption) (*UpdateWidgetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateWidget create widget API
*/
func (a *Client) CreateWidget(params *CreateWidgetParams, opts ...ClientOption) (*CreateWidgetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWidgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWidget",
		Method:             "POST",
		PathPattern:        "/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWidgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWidgetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateWidgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteWidget delete widget API
*/
func (a *Client) DeleteWidget(params *DeleteWidgetParams, opts ...ClientOption) (*DeleteWidgetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWidgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWidget",
		Method:             "DELETE",
		PathPattern:        "/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWidgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWidgetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWidgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWidget get widget API
*/
func (a *Client) GetWidget(params *GetWidgetParams, opts ...ClientOption) (*GetWidgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWidget",
		Method:             "GET",
		PathPattern:        "/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWidgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWidgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWidgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListWidgets list widgets API
*/
func (a *Client) ListWidgets(params *ListWidgetsParams, opts ...ClientOption) (*ListWidgetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWidgetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWidgets",
		Method:             "GET",
		PathPattern:        "/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListWidgetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWidgetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListWidgetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateWidget update widget API
*/
func (a *Client) UpdateWidget(params *UpdateWidgetParams, opts ...ClientOption) (*UpdateWidgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWidgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWidget",
		Method:             "PUT",
		PathPattern:        "/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWidgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWidgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateWidgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
